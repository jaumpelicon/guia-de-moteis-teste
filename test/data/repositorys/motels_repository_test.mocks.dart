// Mocks generated by Mockito 5.4.5 from annotations
// in guia_de_motel_teste/test/data/repositorys/motels_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:guia_de_motel_teste/data/http/api_client.dart' as _i3;
import 'package:guia_de_motel_teste/data/http/endpoint.dart' as _i6;
import 'package:guia_de_motel_teste/domain/errors/failure_error.dart' as _i5;
import 'package:guia_de_motel_teste/domain/motels/motel_entity.dart' as _i7;
import 'package:guia_de_motel_teste/domain/suite/suite_entity.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i3.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureError, dynamic>> request({
    required _i6.Endpoint? endpoint,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#request, [], {#endpoint: endpoint}),
            returnValue:
                _i4.Future<_i2.Either<_i5.FailureError, dynamic>>.value(
                  _FakeEither_0<_i5.FailureError, dynamic>(
                    this,
                    Invocation.method(#request, [], {#endpoint: endpoint}),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.FailureError, dynamic>>);
}

/// A class which mocks [MotelEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockMotelEntity extends _i1.Mock implements _i7.MotelEntity {
  MockMotelEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get fantasia =>
      (super.noSuchMethod(
            Invocation.getter(#fantasia),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#fantasia),
            ),
          )
          as String);

  @override
  String get logo =>
      (super.noSuchMethod(
            Invocation.getter(#logo),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#logo)),
          )
          as String);

  @override
  String get bairro =>
      (super.noSuchMethod(
            Invocation.getter(#bairro),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#bairro),
            ),
          )
          as String);

  @override
  double get distancia =>
      (super.noSuchMethod(Invocation.getter(#distancia), returnValue: 0.0)
          as double);

  @override
  int get qtdFavoritos =>
      (super.noSuchMethod(Invocation.getter(#qtdFavoritos), returnValue: 0)
          as int);

  @override
  List<_i9.SuiteEntity> get suites =>
      (super.noSuchMethod(
            Invocation.getter(#suites),
            returnValue: <_i9.SuiteEntity>[],
          )
          as List<_i9.SuiteEntity>);
}
